use std::{
    error::Error, fmt, io::stdin, thread::{self, JoinHandle}, time::{Duration, Instant}
};
use rand::{thread_rng, Rng};

#[derive(Debug)]
struct OutOfRangeError;
impl Error for OutOfRangeError {}
impl fmt::Display for OutOfRangeError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "The value is outside the expected range")
    }
}

fn main() {
    // Distribution of all possible outcomes for 21 turns of 4 options
    fn rng_to_paralyzed_turns(rng: u32) -> Result<u8, OutOfRangeError> {
        return match rng {
            0..27028 => Ok(0),
            27028..53824 => Ok(1),
            53824..80389 => Ok(2),
            80389..106724 => Ok(3),
            106724..132830 => Ok(4),
            132830..158708 => Ok(5),
            158708..184359 => Ok(6),
            184359..209784 => Ok(7),
            209784..234984 => Ok(8),
            234984..259960 => Ok(9),
            259960..284713 => Ok(10),
            284713..309244 => Ok(11),
            309244..333554 => Ok(12),
            333554..357644 => Ok(13),
            357644..381515 => Ok(14),
            381515..405168 => Ok(15),
            405168..428604 => Ok(16),
            428604..451824 => Ok(17),
            451824..474829 => Ok(18),
            474829..497620 => Ok(19),
            497620..520198 => Ok(20),
            520198..542564 => Ok(21),
            542564..564719 => Ok(22),
            564719..586664 => Ok(23),
            586664..608400 => Ok(24),
            608400..629928 => Ok(25),
            629928..651249 => Ok(26),
            651249..672364 => Ok(27),
            672364..693274 => Ok(28),
            693274..713980 => Ok(29),
            713980..734483 => Ok(30),
            734483..754784 => Ok(31),
            754784..774884 => Ok(32),
            774884..794784 => Ok(33),
            794784..814485 => Ok(34),
            814485..833988 => Ok(35),
            833988..853294 => Ok(36),
            853294..872404 => Ok(37),
            872404..891319 => Ok(38),
            891319..910040 => Ok(39),
            910040..928568 => Ok(40),
            928568..946904 => Ok(41),
            946904..965049 => Ok(42),
            965049..983004 => Ok(43),
            983004..1000770 => Ok(44),
            1000770..1018348 => Ok(45),
            1018348..1035739 => Ok(46),
            1035739..1052944 => Ok(47),
            1052944..1069964 => Ok(48),
            1069964..1086800 => Ok(49),
            1086800..1103453 => Ok(50),
            1103453..1119924 => Ok(51),
            1119924..1136214 => Ok(52),
            1136214..1152324 => Ok(53),
            1152324..1168255 => Ok(54),
            1168255..1184008 => Ok(55),
            1184008..1199584 => Ok(56),
            1199584..1214984 => Ok(57),
            1214984..1230209 => Ok(58),
            1230209..1245260 => Ok(59),
            1245260..1260138 => Ok(60),
            1260138..1274844 => Ok(61),
            1274844..1289379 => Ok(62),
            1289379..1303744 => Ok(63),
            1303744..1317940 => Ok(64),
            1317940..1331968 => Ok(65),
            1331968..1345829 => Ok(66),
            1345829..1359524 => Ok(67),
            1359524..1373054 => Ok(68),
            1373054..1386420 => Ok(69),
            1386420..1399623 => Ok(70),
            1399623..1412664 => Ok(71),
            1412664..1425544 => Ok(72),
            1425544..1438264 => Ok(73),
            1438264..1450825 => Ok(74),
            1450825..1463228 => Ok(75),
            1463228..1475474 => Ok(76),
            1475474..1487564 => Ok(77),
            1487564..1499499 => Ok(78),
            1499499..1511280 => Ok(79),
            1511280..1522908 => Ok(80),
            1522908..1534384 => Ok(81),
            1534384..1545709 => Ok(82),
            1545709..1556884 => Ok(83),
            1556884..1567910 => Ok(84),
            1567910..1578788 => Ok(85),
            1578788..1589519 => Ok(86),
            1589519..1600104 => Ok(87),
            1600104..1610544 => Ok(88),
            1610544..1620840 => Ok(89),
            1620840..1630993 => Ok(90),
            1630993..1641004 => Ok(91),
            1641004..1650874 => Ok(92),
            1650874..1660604 => Ok(93),
            1660604..1670195 => Ok(94),
            1670195..1679648 => Ok(95),
            1679648..1688964 => Ok(96),
            1688964..1698144 => Ok(97),
            1698144..1707189 => Ok(98),
            1707189..1716100 => Ok(99),
            1716100..1724878 => Ok(100),
            1724878..1733524 => Ok(101),
            1733524..1742039 => Ok(102),
            1742039..1750424 => Ok(103),
            1750424..1758680 => Ok(104),
            1758680..1766808 => Ok(105),
            1766808..1774809 => Ok(106),
            1774809..1782684 => Ok(107),
            1782684..1790434 => Ok(108),
            1790434..1798060 => Ok(109),
            1798060..1805563 => Ok(110),
            1805563..1812944 => Ok(111),
            1812944..1820204 => Ok(112),
            1820204..1827344 => Ok(113),
            1827344..1834365 => Ok(114),
            1834365..1841268 => Ok(115),
            1841268..1848054 => Ok(116),
            1848054..1854724 => Ok(117),
            1854724..1861279 => Ok(118),
            1861279..1867720 => Ok(119),
            1867720..1874048 => Ok(120),
            1874048..1880264 => Ok(121),
            1880264..1886369 => Ok(122),
            1886369..1892364 => Ok(123),
            1892364..1898250 => Ok(124),
            1898250..1904028 => Ok(125),
            1904028..1909699 => Ok(126),
            1909699..1915264 => Ok(127),
            1915264..1920724 => Ok(128),
            1920724..1926080 => Ok(129),
            1926080..1931333 => Ok(130),
            1931333..1936484 => Ok(131),
            1936484..1941534 => Ok(132),
            1941534..1946484 => Ok(133),
            1946484..1951335 => Ok(134),
            1951335..1956088 => Ok(135),
            1956088..1960744 => Ok(136),
            1960744..1965304 => Ok(137),
            1965304..1969769 => Ok(138),
            1969769..1974140 => Ok(139),
            1974140..1978418 => Ok(140),
            1978418..1982604 => Ok(141),
            1982604..1986699 => Ok(142),
            1986699..1990704 => Ok(143),
            1990704..1994620 => Ok(144),
            1994620..1998448 => Ok(145),
            1998448..2002189 => Ok(146),
            2002189..2005844 => Ok(147),
            2005844..2009414 => Ok(148),
            2009414..2012900 => Ok(149),
            2012900..2016303 => Ok(150),
            2016303..2019624 => Ok(151),
            2019624..2022864 => Ok(152),
            2022864..2026024 => Ok(153),
            2026024..2029105 => Ok(154),
            2029105..2032108 => Ok(155),
            2032108..2035034 => Ok(156),
            2035034..2037884 => Ok(157),
            2037884..2040659 => Ok(158),
            2040659..2043360 => Ok(159),
            2043360..2045988 => Ok(160),
            2045988..2048544 => Ok(161),
            2048544..2051029 => Ok(162),
            2051029..2053444 => Ok(163),
            2053444..2055790 => Ok(164),
            2055790..2058068 => Ok(165),
            2058068..2060279 => Ok(166),
            2060279..2062424 => Ok(167),
            2062424..2064504 => Ok(168),
            2064504..2066520 => Ok(169),
            2066520..2068473 => Ok(170),
            2068473..2070364 => Ok(171),
            2070364..2072194 => Ok(172),
            2072194..2073964 => Ok(173),
            2073964..2075675 => Ok(174),
            2075675..2077328 => Ok(175),
            2077328..2078924 => Ok(176),
            2078924..2080464 => Ok(177),
            2080464..2081949 => Ok(178),
            2081949..2083380 => Ok(179),
            2083380..2084758 => Ok(180),
            2084758..2086084 => Ok(181),
            2086084..2087359 => Ok(182),
            2087359..2088584 => Ok(183),
            2088584..2089760 => Ok(184),
            2089760..2090888 => Ok(185),
            2090888..2091969 => Ok(186),
            2091969..2093004 => Ok(187),
            2093004..2093994 => Ok(188),
            2093994..2094940 => Ok(189),
            2094940..2095843 => Ok(190),
            2095843..2096704 => Ok(191),
            2096704..2097524 => Ok(192),
            2097524..2098304 => Ok(193),
            2098304..2099045 => Ok(194),
            2099045..2099748 => Ok(195),
            2099748..2100414 => Ok(196),
            2100414..2101044 => Ok(197),
            2101044..2101639 => Ok(198),
            2101639..2102200 => Ok(199),
            2102200..2102728 => Ok(200),
            2102728..2103224 => Ok(201),
            2103224..2103689 => Ok(202),
            2103689..2104124 => Ok(203),
            2104124..2104530 => Ok(204),
            2104530..2104908 => Ok(205),
            2104908..2105259 => Ok(206),
            2105259..2105584 => Ok(207),
            2105584..2105884 => Ok(208),
            2105884..2106160 => Ok(209),
            2106160..2106413 => Ok(210),
            2106413..2106644 => Ok(211),
            2106644..2106854 => Ok(212),
            2106854..2107044 => Ok(213),
            2107044..2107215 => Ok(214),
            2107215..2107368 => Ok(215),
            2107368..2107504 => Ok(216),
            2107504..2107624 => Ok(217),
            2107624..2107729 => Ok(218),
            2107729..2107820 => Ok(219),
            2107820..2107898 => Ok(220),
            2107898..2107964 => Ok(221),
            2107964..2108019 => Ok(222),
            2108019..2108064 => Ok(223),
            2108064..2108100 => Ok(224),
            2108100..2108128 => Ok(225),
            2108128..2108149 => Ok(226),
            2108149..2108164 => Ok(227),
            2108164..2108174 => Ok(228),
            2108174..2108180 => Ok(229),
            2108180..2108183 => Ok(230),
            2108183..2108184 => Ok(231),
            _ => Err(OutOfRangeError)
        }
    }

    fn run_simulations(battles: u32) -> (u8, u32) {
        let mut rng = thread_rng();
        let mut most_paralyzed: u8 = 0;
        let mut battles_played: u32 = 0;
        for i in 1..battles + 1 {
            battles_played = i;
            let mut paralyzed_turns: u8 = 0;
            for _ in 0..11 {
                paralyzed_turns += rng_to_paralyzed_turns(rng.gen_range(0..2108184 as u32)).unwrap();
            }
            if paralyzed_turns > most_paralyzed {
                most_paralyzed = paralyzed_turns;
            }
            if most_paralyzed >= 177 {
                return (most_paralyzed, battles_played);
            }
        }
        return (most_paralyzed, battles_played);
    }

    println!("How many battles would you like to attempt?");
    let mut buf: String = "".to_owned();
    stdin().read_line(&mut buf).unwrap();

    let mut battles = u32::from_str_radix(&buf.trim(), 10).unwrap();
    
    let thread_count = thread::available_parallelism().unwrap();
    let mut threads: Vec<JoinHandle<(u8, u32)>> = vec![];

    println!("Running with {thread_count} threads");

    let start_time: Instant = Instant::now();

    for i in 0..thread_count.into() {
        let battles_to_run = battles / (thread_count.get() - i) as u32;
        let thread: JoinHandle<(u8, u32)> = thread::spawn(move || run_simulations(battles_to_run));
        threads.push(thread);
        battles -= battles_to_run;
    }

    let mut most_paralyzed_turns = 0;
    let mut played_battles = 0;
    for thread in threads {
        let (most_paralyzed_thread, played_battles_thread) = thread.join().unwrap();
        played_battles += played_battles_thread;
        if most_paralyzed_thread > most_paralyzed_turns {
            most_paralyzed_turns = most_paralyzed_thread
        }
    }

    let duration: Duration = start_time.elapsed();

    println!("Highest amount of paralyzed turns: {}", most_paralyzed_turns);
    println!("Number of battles simulated: {}", played_battles);
    println!("The code took: {}s", duration.as_secs_f64());
}
